package com.example.mameto

import android.annotation.SuppressLint
import android.content.Intent
import android.content.SharedPreferences
import androidx.appcompat.app.AppCompatActivity
import android.os.Bundle
import android.util.Log
import android.view.View
import android.widget.Button
import android.widget.Toast
import androidx.appcompat.app.AlertDialog
import androidx.recyclerview.widget.LinearLayoutManager
import androidx.recyclerview.widget.RecyclerView
import com.example.mameto.databinding.ActivityCommunityCommentsBinding
import com.example.mameto.databinding.ActivityCommunityPostsBinding
import com.example.mameto.models.Comment
import com.google.firebase.auth.FirebaseAuth
import com.google.firebase.firestore.FieldValue
import com.google.firebase.firestore.FirebaseFirestore
import com.google.firebase.firestore.Query
import com.google.firebase.firestore.ktx.firestore
import com.google.firebase.ktx.Firebase
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.launch
private const val TAG = "Community_comments_Activity"
class Community_comments_Activity : AppCompatActivity() {
    private lateinit var binding: ActivityCommunityCommentsBinding
    lateinit var sharedPref: SharedPreferences
    lateinit var editor: SharedPreferences.Editor
    lateinit var auth: FirebaseAuth
    lateinit var myDB: FirebaseFirestore
    private lateinit var comments: MutableList<Comment>
    private lateinit var adapter: CommentAdapter
    lateinit var postID: String
    private val commentCollectionRef = Firebase.firestore.collection("Comments")
    private val testpostRef = Firebase.firestore.collection("Posts")

    @SuppressLint("LongLogTag")
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        binding = ActivityCommunityCommentsBinding.inflate(layoutInflater)
        setContentView(binding.root)

        sharedPref = getSharedPreferences("User", AppCompatActivity.MODE_PRIVATE)
        editor = sharedPref.edit()
        val userID = sharedPref.getString("userID",null)
        if(userID == null){
                 binding.edWriteComment.visibility = View.GONE
                 binding.imSendComment.visibility = View.GONE
             }
             else{
                 binding.edWriteComment.visibility = View.VISIBLE
                 binding.imSendComment.visibility = View.VISIBLE
             }


        comments = mutableListOf()
        adapter = CommentAdapter(this, comments)
        binding.commentsRecyclerView.adapter = adapter
        binding.commentsRecyclerView.layoutManager = LinearLayoutManager(this)

        myDB = FirebaseFirestore.getInstance()
        var commentsRef = myDB
            .collection("Comments")
            .orderBy("Date", Query.Direction.ASCENDING)

       postID = intent.getStringExtra("KEY").toString()

        commentsRef = commentsRef.whereEqualTo("PostID", postID)

        commentsRef.addSnapshotListener { value, error ->
            if (error != null || value == null) {
                Log.e(TAG, "EXceptionnnnnn", error)
                return@addSnapshotListener
            }
            val tesLis = value.toObjects(Comment::class.java)
            comments.clear()
            comments.addAll(tesLis)
            adapter.notifyDataSetChanged()
            for (comment in tesLis) {
                Log.i(TAG, "Comment ${comment}")
            }
        }


        binding.imSendComment.setOnClickListener {
            if (binding.edWriteComment.text.isEmpty()) {
                AlertDialog.Builder(this)
                    .setTitle("You can't send an empty comment")
                    .setIcon(R.drawable.ic_baseline_sentiment_dissatisfied_24)
                    .setPositiveButton("Ok"){
                            dialog,_->
                        dialog.dismiss()
                    }
                    .create()
                    .show()
            }
            if (binding.edWriteComment.text.trim().isNotEmpty()) {
                val autoGeneratedCommentID = commentCollectionRef.document().id
                CoroutineScope(Dispatchers.IO).launch {
                    try {
                        val data = hashMapOf(
                            "AuthorID" to userID,
                            "Date" to System.currentTimeMillis(),
                            "PostID" to postID,
                            "Text" to binding.edWriteComment.text.toString(),
                            "id" to autoGeneratedCommentID
                        )
                        //binding.edWriteComment.setText("")
                        commentCollectionRef.document(autoGeneratedCommentID).set(data)
                            .addOnCompleteListener {
                                binding.edWriteComment.setText("")
                                testpostRef.document(postID).update(
                                    "Comments",
                                    FieldValue.arrayUnion(autoGeneratedCommentID)
                                )
                            }
                    } catch (e: Exception) {
                        Toast.makeText(
                            this@Community_comments_Activity,
                            e.message,
                            Toast.LENGTH_LONG
                        ).show()
                    }
                }
            }
        }
    }
}
